import React, { useState, useRef, useEffect } from 'react';
import { FiMenu, FiShare, FiSearch, FiPaperclip, FiSettings, FiLogOut, FiSmile, FiX, FiArrowUp } from 'react-icons/fi';
import ChatMessage from './ChatMessage';
import FileAttachment from './FileAttachment';
import { useFirestore } from '../contexts/FirestoreContext';
import { useAuth } from '../contexts/AuthContext';

const ChatArea = ({ isSidebarOpen, setIsSidebarOpen }) => {
  const [inputValue, setInputValue] = useState('');
  const [showUserDropdown, setShowUserDropdown] = useState(false);
  const [selectedFiles, setSelectedFiles] = useState([]);
  const fileInputRef = useRef(null);
  const dropdownRef = useRef(null);
  
  const { currentUser, logout } = useAuth();
  const { 
    currentFolder,
    currentConversation,
    messages,
    addNewMessage,
    createNewConversation,
    selectConversation
  } = useFirestore();
  
  // Close dropdown when clicking outside
  useEffect(() => {
    function handleClickOutside(event) {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setShowUserDropdown(false);
      }
    }
    
    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  // Handle logout
  const handleLogout = async (e) => {
    e.preventDefault();
    setShowUserDropdown(false);
    try {
      await logout();
    } catch (error) {
      console.error("Failed to log out", error);
    }
  };

  // Handle form submission
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!inputValue.trim() && selectedFiles.length === 0) return;
    
    try {
      // Add user message
      const userMessage = {
        role: 'user',
        content: inputValue,
        files: selectedFiles.map(file => ({ file }))
      };
      
      await addNewMessage(userMessage);
      
      // Clear input and selected files
      setInputValue('');
      setSelectedFiles([]);
      
      // Add AI response
      const aiMessage = {
        role: 'assistant',
        content: 'This is a placeholder response. In a real implementation, this would be generated by an AI model.'
      };
      
      await addNewMessage(aiMessage);
    } catch (error) {
      console.error('Error submitting message:', error);
    }
  };

  const handleNewChat = async () => {
    try {
      const newConversation = await createNewConversation();
      if (newConversation) {
        await selectConversation(newConversation.id);
      }
    } catch (error) {
      console.error('Error creating new chat:', error);
    }
  };

  // Handle key press in textarea
  const handleKeyDown = (e) => {
    // Submit on Enter without Shift key
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSubmit(e);
    }
  };

  // Handle file selection
  const handleFileSelect = (e) => {
    if (e.target.files) {
      const newFiles = Array.from(e.target.files).map(file => ({
        file,
        fileName: file.name,
        contentType: file.type,
        size: file.size,
        // Create object URL for preview
        downloadUrl: URL.createObjectURL(file)
      }));
      
      setSelectedFiles([...selectedFiles, ...newFiles]);
    }
  };

  // Remove a selected file
  const removeFile = (index) => {
    // Revoke the object URL to prevent memory leaks
    if (selectedFiles[index].downloadUrl && selectedFiles[index].downloadUrl.startsWith('blob:')) {
      URL.revokeObjectURL(selectedFiles[index].downloadUrl);
    }
    setSelectedFiles(selectedFiles.filter((_, i) => i !== index));
  };

  // Get initials for user avatar if no photoURL is available
  const getUserInitials = () => {
    if (!currentUser?.displayName) return 'U';
    return currentUser.displayName.split(' ').map(n => n[0]).join('').toUpperCase();
  };

  // Find the last assistant message index
  const lastAssistantIndex = [...(messages || [])].reverse().findIndex(m => m.role === 'assistant');
  const lastAssistantPosition = lastAssistantIndex >= 0 ? messages.length - 1 - lastAssistantIndex : -1;

  return (
    <div className="flex-1 flex flex-col bg-pure-white relative overflow-hidden">
      {/* Header */}
      <header className="border-b border-soft-gray p-4 flex items-center justify-between bg-pure-white z-10">
        <button 
          onClick={() => setIsSidebarOpen(!isSidebarOpen)}
          className="p-2 rounded-md hover:bg-soft-gray"
        >
          <FiMenu className="text-dark-espresso" />
        </button>
        <div className="flex-1 text-center">
          <span className="font-medium text-dark-espresso">
            {currentConversation?.title || 'New Conversation'}
          </span>
        </div>
        <div className="flex items-center gap-2">
          <button className="flex items-center gap-2 px-3 py-1.5 border border-soft-gray rounded-md text-dark-espresso hover:bg-soft-gray">
            <FiShare size={16} />
            <span>Share</span>
          </button>
          
          {/* User Account Button */}
          <div className="relative" ref={dropdownRef}>
            <button 
              className="flex items-center justify-center w-9 h-9 rounded-full bg-deep-plum text-pure-white ml-2"
              onClick={() => setShowUserDropdown(!showUserDropdown)}
            >
              {currentUser?.photoURL ? (
                <img src={currentUser.photoURL} alt={currentUser.displayName} className="w-full h-full rounded-full object-cover" />
              ) : (
                <span>{getUserInitials()}</span>
              )}
            </button>
            
            {/* User Dropdown Menu */}
            {showUserDropdown && (
              <div className="absolute right-0 mt-2 w-48 bg-pure-white shadow-lg rounded-md border border-soft-gray z-20">
                <div className="p-3 border-b border-soft-gray">
                  <div className="font-medium">{currentUser?.displayName || 'User'}</div>
                  <div className="text-sm text-muted-taupe">{currentUser?.email || 'user@example.com'}</div>
                </div>
                <ul>
                  <li className="hover:bg-soft-gray">
                    <a href="#myGPTs" className="block px-4 py-2 text-dark-espresso">
                      <div className="flex items-center gap-2">
                        <FiSmile size={16} />
                        <span>My GPTs</span>
                      </div>
                    </a>
                  </li>
                  <li className="hover:bg-soft-gray">
                    <a href="#settings" className="block px-4 py-2 text-dark-espresso">
                      <div className="flex items-center gap-2">
                        <FiSettings size={16} />
                        <span>Settings</span>
                      </div>
                    </a>
                  </li>
                  <li className="hover:bg-soft-gray border-t border-soft-gray">
                    <a href="#logout" className="block px-4 py-2 text-dark-espresso" onClick={handleLogout}>
                      <div className="flex items-center gap-2">
                        <FiLogOut size={16} />
                        <span>Log out</span>
                      </div>
                    </a>
                  </li>
                </ul>
              </div>
            )}
          </div>
        </div>
      </header>

      {/* Main Chat Content */}
      <div className="flex-1 overflow-y-auto p-4 pb-32">
        {!currentConversation || messages.length === 0 ? (
          // Welcome message for new conversations
          <div className="h-full flex flex-col items-center justify-center text-center p-4">
            <h2 className="text-2xl font-medium mb-4">What can I help with?</h2>
            <p className="text-muted-taupe max-w-md mb-8">
              Ask me anything! I can answer questions, provide information, help with tasks, and more.
            </p>
            <div className="grid grid-cols-2 gap-4 max-w-2xl">
              <button 
                onClick={() => setInputValue("How do I improve my website's accessibility?")}
                className="bg-soft-gray p-4 rounded-lg text-left hover:bg-gray-200 transition-colors"
              >
                <div className="font-medium mb-1">Website Accessibility</div>
                <div className="text-sm text-muted-taupe">Tips for making websites more accessible</div>
              </button>
              <button 
                onClick={() => setInputValue("Explain the key principles of responsive design")}
                className="bg-soft-gray p-4 rounded-lg text-left hover:bg-gray-200 transition-colors"
              >
                <div className="font-medium mb-1">Responsive Design</div>
                <div className="text-sm text-muted-taupe">Learn about responsive design principles</div>
              </button>
              <button 
                onClick={() => setInputValue("What's the difference between CSS Grid and Flexbox?")}
                className="bg-soft-gray p-4 rounded-lg text-left hover:bg-gray-200 transition-colors"
              >
                <div className="font-medium mb-1">CSS Layout Methods</div>
                <div className="text-sm text-muted-taupe">Compare Grid and Flexbox capabilities</div>
              </button>
              <button 
                onClick={() => setInputValue("Generate a color palette for a professional portfolio website")}
                className="bg-soft-gray p-4 rounded-lg text-left hover:bg-gray-200 transition-colors"
              >
                <div className="font-medium mb-1">Color Palette Ideas</div>
                <div className="text-sm text-muted-taupe">Get color scheme suggestions</div>
              </button>
            </div>
          </div>
        ) : (
          // Display conversation messages
          messages.map((message, index) => (
            <ChatMessage 
              key={message.id || index} 
              message={message} 
              isLatest={index === lastAssistantPosition}
            />
          ))
        )}
      </div>

      {/* Input Area */}
      <div className="absolute bottom-0 left-0 right-0 p-4 bg-pure-white border-t border-soft-gray">
        {/* Selected files preview */}
        {selectedFiles.length > 0 && (
          <div className="max-w-3xl mx-auto mb-2 space-y-2">
            {selectedFiles.map((file, index) => (
              <FileAttachment 
                key={index} 
                file={file} 
                onRemove={() => removeFile(index)}
                isPreview={true}
              />
            ))}
          </div>
        )}
        
        <form onSubmit={handleSubmit} className="relative max-w-3xl mx-auto">
          <textarea
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            onKeyDown={handleKeyDown}
            placeholder="Ask anything"
            className="w-full p-4 pr-24 rounded-lg border border-soft-gray focus:outline-none focus:ring-2 focus:ring-deep-plum focus:border-transparent resize-none"
            rows={1}
            style={{ minHeight: '56px' }}
          />
          <div className="absolute bottom-3 right-2 flex items-center">
            <input
              type="file"
              ref={fileInputRef}
              onChange={handleFileSelect}
              className="hidden"
              multiple
            />
            <button 
              type="button" 
              className="p-2 text-muted-taupe hover:text-deep-plum"
              onClick={() => fileInputRef.current.click()}
            >
              <FiPaperclip />
            </button>
            <button type="button" className="p-2 text-muted-taupe hover:text-deep-plum">
              <FiSearch />
            </button>
            <button 
              type="submit" 
              className="ml-1 p-2 bg-deep-plum text-white rounded-full hover:bg-deep-plum/90"
              aria-label="Send message"
            >
              <FiArrowUp size={18} />
            </button>
          </div>
        </form>
        <div className="text-center mt-2 text-xs text-muted-taupe">
          ChatGPT can make mistakes. Check important info.
        </div>
      </div>
    </div>
  );
};

export default ChatArea; 